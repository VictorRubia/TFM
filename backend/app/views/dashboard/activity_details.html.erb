<%= render "layouts/dashboard" %>
<%= stylesheet_link_tag 'create_user' %>

<% require "i18n" %>
<% @activity = activity_details %>
<% @activity.viewed = 1 %>
<% @activity.save %>
<% @user = User.find(params[:id]) %>
<% @tags = Tag.where(activity_id: @activity.id) %>
<% @stress = mid_process(@activity) %>

<main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
  <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <div class="d-flex align-items-start ">
      <div class="btn-group me-2 btn-toolbar mb-2 mb-md-0">
        <%= link_to :back, :class => 'btn btn-sm btn-outline-secondary' do %>
          <i data-feather="arrow-left-circle" class="icon icon-show"></i>
        <% end %>
      </div>

      <h2>Actividad de <%= @activity.name %></h2>
      <% if @activity.end_d.nil? %>
        <div class="live-indicator">
          <figure class="live-indicator__circle"></figure>
          <span class="live-indicator__text">DIRECTO</span>
        </div>
      <% end %>
    </div>

    <div class="btn-toolbar mb-2 mb-md-0">
      <div class="btn-group me-2">
        <a href="/activities/<%= @activity.id %>/export.csv" class="btn btn-sm btn-outline-secondary">Exportar</a>
        <a href="<%= @activity.id %>/reprocess" class="btn btn-sm btn-outline-secondary">Reprocesar</a>
      </div>
    </div>
  </div>
  <h4>Usuario: <%= @user.name %></h4>


  <div class="container-fluid">
    <div class="card text-center mb-3">
      <div class="card-header">
        Gráfico estrés
      </div>
      <div class="card-body">
        <h5 class="card-title">Gráfico nivel de estrés</h5>
        <canvas id="myChart" width="80vw" height="20vw"></canvas>
      </div>
    </div>
    <div class="card text-center mb-3">
      <div class="card-header">
        Etiquetado
      </div>
      <div class="card-body">
        <h5 class="card-title"></h5>
        <div class="table-responsive">
          <table class="table table-bordered table-striped align-middle table-sm">
            <thead>
            <tr>
              <th scope="col">Instante</th>
              <th scope="col">Estado</th>
              <th scope="col">Contexto</th>
              <th scope="col">Emoción</th>
              <th scope="col">Sentimiento</th>
            </tr>
            </thead>
            <tbody>
            <% @tags.each do |tag| %>
              <% @tag = JSON.parse(tag.tag) %>
              <tr>
                <td><%= tag.datetime.strftime("%H:%M") %></td>
                <td>
                  <div class="container">
                    <div class="row">
                        <div class="col-sm">
                          <figure>
                            <%= image_tag(asset_path("tags/#{I18n.transliterate(@tag["status"].downcase.gsub(" ", "_"))}.png"), :alt => @tag["status"], style: 'height:50px;width:autopx;') %>
                            <figcaption><%= @tag["status"] %></figcaption>
                          </figure>
                        </div>
                    </div>
                  </div>
                </td>
                <td>
                  <div class="container">
                    <div class="row">
                      <% @tag["context"].each do |tag| %>
                      <div class="col-sm">
                        <figure>
                          <%= image_tag(asset_path("tags/#{I18n.transliterate(tag.downcase.gsub(" ", "_"))}.png"), :alt => tag, style: 'height:50px;width:autopx;') %>
                          <figcaption><%= tag %></figcaption>
                        </figure>
                      </div>
                      <% end %>
                    </div>
                  </div>
                </td>
                <td>
                  <div class="container">
                    <div class="row">
                        <div class="col-sm">
                          <figure>
                            <%= image_tag(asset_path("tags/#{I18n.transliterate(@tag["emotions"].downcase.gsub(" ", "_"))}.png"), :alt => @tag["emotions"], style: 'height:35px;width:autopx;') %>
                            <figcaption><%= @tag["emotions"] %></figcaption>
                          </figure>
                        </div>
                    </div>
                  </div>
                </td>
                <td>
                  <div class="container">
                    <div class="row">
                        <div class="col-sm">
                          <figure>
                            <%= image_tag(asset_path("tags/#{I18n.transliterate(@tag["feelings"].downcase.gsub(" ", "_"))}.png"), :alt => @tag["feelings"], style: 'height:35px;width:autopx;') %>
                            <figcaption><%= @tag["feelings"] %></figcaption>
                          </figure>
                        </div>
                    </div>
                  </div>
                </td>
              </tr>
            <% end %>
            </tbody>
          </table>
        </div>

        <p class="card-text">
        </p>
      </div>
    </div>
  </div>
</main>


<script>

    (function () {
        'use strict'

        // Graphs
        var ctx = document.getElementById('myChart').getContext("2d");
        // eslint-disable-next-line no-unused-vars
        var tranquilo = new Image(25,25);
        tranquilo.src = '<%= asset_url("tags/tranquilo") %>';
        var nervioso = new Image(25,25);
        nervioso.src = '<%= asset_url("tags/nervioso") %>';
        var yLabels = {
            '-2': 'No estresado', '0' : 'Estrés leve', '2' : 'Estresado'
        };
        const skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;
        const down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;
        const myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: <%= raw @stress.map { |stress| stress.datetime.strftime("%H:%M") } %>,
                datasets: [{
                    label: 'Nivel de estrés',
                    data: <%= raw @stress.map { |stress| if stress.level == -1 then Float::NAN else stress.level end } %>,
                    backgroundColor: 'transparent',
                    borderColor: '#f05f3a',
                    borderWidth: 2,
                    pointBackgroundColor: '#f05f3a',
                    segment: {
                        borderColor: ctx => skipped(ctx, 'rgb(0,0,0,0.2)') || down(ctx, 'rgb(192,75,75)'),
                        borderDash: ctx => skipped(ctx, [6, 6]),
                    },
                    spanGaps: true
                }]
            },
            options: {
                plugins: {
                    legend: false
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            callback: function(value, index, values) {
                                return yLabels[value];
                            }
                        }
                    }],
                    y: {
                        beginAtZero: false
                    }
                }
            }
        });
    })()
</script>